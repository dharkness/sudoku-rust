use std::fmt;
use std::ops::{Deref, DerefMut};

use crate::layout::{Coord, House, Shape};

use super::label::{index_from_label, label_from_index};
use super::{Bit, Set};

/// Specifies a single cell by its index from left to right and top to bottom.
#[derive(Clone, Copy, Debug, Default, Hash, Eq, PartialEq, Ord, PartialOrd)]
pub struct Cell(u32);

impl Cell {
    pub const COUNT: u32 = 81;

    pub const fn new(index: u32) -> Self {
        debug_assert!(index < Cell::COUNT);
        Self(index)
    }

    pub const fn index(&self) -> u32 {
        self.0
    }

    pub const fn usize(&self) -> usize {
        self.0 as usize
    }

    pub const fn bit(&self) -> Bit {
        Bit::new(1 << self.0)
    }

    pub const fn house(&self, shape: Shape) -> House {
        HOUSES[self.usize()][shape as usize]
    }

    pub const fn row(&self) -> House {
        HOUSES[self.usize()][Shape::Row as usize]
    }

    pub const fn column(&self) -> House {
        HOUSES[self.usize()][Shape::Column as usize]
    }

    pub const fn block(&self) -> House {
        HOUSES[self.usize()][Shape::Block as usize]
    }

    pub const fn coord_in_row(&self) -> Coord {
        HOUSES_COORDS[self.usize()][Shape::Row as usize]
    }

    pub const fn coord_in_column(&self) -> Coord {
        HOUSES_COORDS[self.usize()][Shape::Column as usize]
    }

    pub const fn coord_in_block(&self) -> Coord {
        HOUSES_COORDS[self.usize()][Shape::Block as usize]
    }

    pub const fn neighbors(&self) -> Set {
        NEIGHBORS[self.usize()]
    }

    pub const fn label(&self) -> &'static str {
        label_from_index(self.0)
    }
}

impl From<&str> for Cell {
    fn from(label: &str) -> Self {
        Self(index_from_label(label))
    }
}

impl From<Bit> for Cell {
    fn from(bit: Bit) -> Self {
        bit.cell()
    }
}

impl fmt::Display for Cell {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.label())?;
        Ok(())
    }
}

const HOUSES: [[House; 3]; 81] = {
    let mut houses = [[House::new(Shape::Row, Coord::new(0)); 3]; 81];
    let mut cell = 0;
    while cell < 81 {
        let row = cell / 9;
        let column = cell % 9;
        let block = (row / 3) * 3 + (column / 3);
        houses[cell as usize] = [
            House::row(Coord::new(row)),
            House::column(Coord::new(column)),
            House::block(Coord::new(block)),
        ];
        cell += 1;
    }
    houses
};

const HOUSES_COORDS: [[Coord; 3]; 81] = {
    let mut coords = [[Coord::new(0); 3]; 81];
    let mut cell = 0;
    while cell < 81 {
        let row = cell / 9;
        let column = cell % 9;
        let block = 3 * (row % 3) + (column % 3);
        coords[cell as usize] = [
            Coord::new(column),
            Coord::new(row),
            Coord::new(block),
        ];
        cell += 1;
    }
    coords
};

/// Holds the neighbors for every unique cell.
/// A cell's neighbors are all the cells in the same row, column and block, excluding the cell itself.
/// TODO Use a function to generate this.
const NEIGHBORS: [Set; 81] = [
    Set::new(0b000000001000000001000000001000000001000000001000000001000000111000000111111111110),
    Set::new(0b000000010000000010000000010000000010000000010000000010000000111000000111111111101),
    Set::new(0b000000100000000100000000100000000100000000100000000100000000111000000111111111011),
    Set::new(0b000001000000001000000001000000001000000001000000001000000111000000111000111110111),
    Set::new(0b000010000000010000000010000000010000000010000000010000000111000000111000111101111),
    Set::new(0b000100000000100000000100000000100000000100000000100000000111000000111000111011111),
    Set::new(0b001000000001000000001000000001000000001000000001000000111000000111000000110111111),
    Set::new(0b010000000010000000010000000010000000010000000010000000111000000111000000101111111),
    Set::new(0b100000000100000000100000000100000000100000000100000000111000000111000000011111111),
    Set::new(0b000000001000000001000000001000000001000000001000000001000000111111111110000000111),
    Set::new(0b000000010000000010000000010000000010000000010000000010000000111111111101000000111),
    Set::new(0b000000100000000100000000100000000100000000100000000100000000111111111011000000111),
    Set::new(0b000001000000001000000001000000001000000001000000001000000111000111110111000111000),
    Set::new(0b000010000000010000000010000000010000000010000000010000000111000111101111000111000),
    Set::new(0b000100000000100000000100000000100000000100000000100000000111000111011111000111000),
    Set::new(0b001000000001000000001000000001000000001000000001000000111000000110111111111000000),
    Set::new(0b010000000010000000010000000010000000010000000010000000111000000101111111111000000),
    Set::new(0b100000000100000000100000000100000000100000000100000000111000000011111111111000000),
    Set::new(0b000000001000000001000000001000000001000000001000000001111111110000000111000000111),
    Set::new(0b000000010000000010000000010000000010000000010000000010111111101000000111000000111),
    Set::new(0b000000100000000100000000100000000100000000100000000100111111011000000111000000111),
    Set::new(0b000001000000001000000001000000001000000001000000001000111110111000111000000111000),
    Set::new(0b000010000000010000000010000000010000000010000000010000111101111000111000000111000),
    Set::new(0b000100000000100000000100000000100000000100000000100000111011111000111000000111000),
    Set::new(0b001000000001000000001000000001000000001000000001000000110111111111000000111000000),
    Set::new(0b010000000010000000010000000010000000010000000010000000101111111111000000111000000),
    Set::new(0b100000000100000000100000000100000000100000000100000000011111111111000000111000000),
    Set::new(0b000000001000000001000000001000000111000000111111111110000000001000000001000000001),
    Set::new(0b000000010000000010000000010000000111000000111111111101000000010000000010000000010),
    Set::new(0b000000100000000100000000100000000111000000111111111011000000100000000100000000100),
    Set::new(0b000001000000001000000001000000111000000111000111110111000001000000001000000001000),
    Set::new(0b000010000000010000000010000000111000000111000111101111000010000000010000000010000),
    Set::new(0b000100000000100000000100000000111000000111000111011111000100000000100000000100000),
    Set::new(0b001000000001000000001000000111000000111000000110111111001000000001000000001000000),
    Set::new(0b010000000010000000010000000111000000111000000101111111010000000010000000010000000),
    Set::new(0b100000000100000000100000000111000000111000000011111111100000000100000000100000000),
    Set::new(0b000000001000000001000000001000000111111111110000000111000000001000000001000000001),
    Set::new(0b000000010000000010000000010000000111111111101000000111000000010000000010000000010),
    Set::new(0b000000100000000100000000100000000111111111011000000111000000100000000100000000100),
    Set::new(0b000001000000001000000001000000111000111110111000111000000001000000001000000001000),
    Set::new(0b000010000000010000000010000000111000111101111000111000000010000000010000000010000),
    Set::new(0b000100000000100000000100000000111000111011111000111000000100000000100000000100000),
    Set::new(0b001000000001000000001000000111000000110111111111000000001000000001000000001000000),
    Set::new(0b010000000010000000010000000111000000101111111111000000010000000010000000010000000),
    Set::new(0b100000000100000000100000000111000000011111111111000000100000000100000000100000000),
    Set::new(0b000000001000000001000000001111111110000000111000000111000000001000000001000000001),
    Set::new(0b000000010000000010000000010111111101000000111000000111000000010000000010000000010),
    Set::new(0b000000100000000100000000100111111011000000111000000111000000100000000100000000100),
    Set::new(0b000001000000001000000001000111110111000111000000111000000001000000001000000001000),
    Set::new(0b000010000000010000000010000111101111000111000000111000000010000000010000000010000),
    Set::new(0b000100000000100000000100000111011111000111000000111000000100000000100000000100000),
    Set::new(0b001000000001000000001000000110111111111000000111000000001000000001000000001000000),
    Set::new(0b010000000010000000010000000101111111111000000111000000010000000010000000010000000),
    Set::new(0b100000000100000000100000000011111111111000000111000000100000000100000000100000000),
    Set::new(0b000000111000000111111111110000000001000000001000000001000000001000000001000000001),
    Set::new(0b000000111000000111111111101000000010000000010000000010000000010000000010000000010),
    Set::new(0b000000111000000111111111011000000100000000100000000100000000100000000100000000100),
    Set::new(0b000111000000111000111110111000001000000001000000001000000001000000001000000001000),
    Set::new(0b000111000000111000111101111000010000000010000000010000000010000000010000000010000),
    Set::new(0b000111000000111000111011111000100000000100000000100000000100000000100000000100000),
    Set::new(0b111000000111000000110111111001000000001000000001000000001000000001000000001000000),
    Set::new(0b111000000111000000101111111010000000010000000010000000010000000010000000010000000),
    Set::new(0b111000000111000000011111111100000000100000000100000000100000000100000000100000000),
    Set::new(0b000000111111111110000000111000000001000000001000000001000000001000000001000000001),
    Set::new(0b000000111111111101000000111000000010000000010000000010000000010000000010000000010),
    Set::new(0b000000111111111011000000111000000100000000100000000100000000100000000100000000100),
    Set::new(0b000111000111110111000111000000001000000001000000001000000001000000001000000001000),
    Set::new(0b000111000111101111000111000000010000000010000000010000000010000000010000000010000),
    Set::new(0b000111000111011111000111000000100000000100000000100000000100000000100000000100000),
    Set::new(0b111000000110111111111000000001000000001000000001000000001000000001000000001000000),
    Set::new(0b111000000101111111111000000010000000010000000010000000010000000010000000010000000),
    Set::new(0b111000000011111111111000000100000000100000000100000000100000000100000000100000000),
    Set::new(0b111111110000000111000000111000000001000000001000000001000000001000000001000000001),
    Set::new(0b111111101000000111000000111000000010000000010000000010000000010000000010000000010),
    Set::new(0b111111011000000111000000111000000100000000100000000100000000100000000100000000100),
    Set::new(0b111110111000111000000111000000001000000001000000001000000001000000001000000001000),
    Set::new(0b111101111000111000000111000000010000000010000000010000000010000000010000000010000),
    Set::new(0b111011111000111000000111000000100000000100000000100000000100000000100000000100000),
    Set::new(0b110111111111000000111000000001000000001000000001000000001000000001000000001000000),
    Set::new(0b101111111111000000111000000010000000010000000010000000010000000010000000010000000),
    Set::new(0b011111111111000000111000000100000000100000000100000000100000000100000000100000000),
];

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn bits() {
        assert_eq!(Bit::new(0b1000000), Cell::new(6).bit());
    }
}
